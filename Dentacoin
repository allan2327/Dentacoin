pragma solidity ^0.4.1;

contract owned {
    address public owner;

    function owned() {
        owner = msg.sender;
    }

    modifier onlyOwner {
        if (msg.sender != owner) throw;
        _;
    }

    function transferOwnership(address newOwner) onlyOwner {
        owner = newOwner;
    }
}

contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }

contract exToken {
    function transfer(address receiver, uint amount){  }
}

contract token is owned {
    /* Public variables of the token */
    string public name;
    string public symbol;
    uint8 public decimals;
    exToken public exchangeToken;
    uint256 public buyPrice;
    uint256 public sellPrice;
    uint256 public minBalanceForAccounts;
    uint256 public ethAmount


/* Creates an array with all balances */
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

/* Generates a public event on the blockchain that will notify clients */
    event Transfer(address indexed from, address indexed to, uint256 value);

/* Initializes contract with initial supply tokens to the creator of the contract */
    function token() {
        balanceOf[msg.sender] = 8888888888;
// Give the creator all initial tokens
        name = "Dentacoin";
// Set the name for display purposes
        symbol = "DEC";
// Set the symbol for display purposes
        decimals = 0;
// Amount of decimals for display purposes
        exchangeToken = 0;
        //if (!msg.sender.send(msg.value)) throw;
// Send back any ether uerberfluessig wegen payable?
    }

    function setPrices(uint256 newBuyPriceInWei) onlyOwner {
        buyPrice = newBuyPriceInWei;
        sellPrice = newSellPrice;
    }
    function setMinBalanceForAccounts(uint gasPerTransfer) onlyOwner {
        minBalanceForAccounts = gasPerTransfer * tx.gasprice;
    }

    function setExchangeToken(address exchangeTokenAddress) onlyOwner {
        exchangeToken = exToken(exchangeTokenAddress);
    }

    function buy() {
        if (buyPrice == 0) throw;
// avoids unwanted buying
        uint amount = msg.value / buyPrice;
// calculates the amount Was ist mit Rundungen? Trinkgeld?
        if (balanceOf[this] < amount) throw;
// checks if it has enough to sell
        balanceOf[msg.sender] += amount;
// adds the amount to buyer's balance
        balanceOf[this] -= amount;
// subtracts amount from seller's balance
        Transfer(this, msg.sender, amount);
// execute an event reflecting the change
    }
    
    function sell(uint256 amount) {
        if (sellPrice == 0) throw;
        if (exchangeToken == exToken(0)) {
            if (balanceOf[msg.sender] < amount ) throw;
// checks if the sender has enough to sell
            balanceOf[this] += amount;
// adds the amount to owner's balance
            balanceOf[msg.sender] -= amount;
// subtracts the amount from seller's balance
            if (!msg.sender.send(amount * sellPrice)) {
// sends ether to the seller. It's important
                throw;
// to do this last to avoid recursion attacks
            } else {
                Transfer(msg.sender, this, amount);
// executes an event reflecting on the change
            }               
        } else {
            //token sell
        }
    }



/* Send coins */
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;
// Check if the sender has enough
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
// Check for overflows
        balanceOf[msg.sender] -= _value;
// Subtract from the sender
        balanceOf[_to] += _value;
// Add the same to the recipient
        Transfer(msg.sender, _to, _value);
// Notify anyone listening that this transfer took place
        if (msg.sender.balance < minBalanceForAccounts && this.balance >= minBalanceForAccounts) {
            if (!msg.sender.send(minBalanceForAccounts-msg.sender.balance)) throw;
        }
    }

/* Allow another contract to spend some tokens in your behalf */
    function approve(address _spender, uint256 _value)
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        tokenRecipient spender = tokenRecipient(_spender);
        return true;
    }

/* Approve and then comunicate the approved contract in a single tx */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }

/* A contract attempts to get the coins */
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balanceOf[_from] < _value) throw;
// Check if the sender has enough
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
// Check for overflows
        if (_value > allowance[_from][msg.sender]) throw;
// Check allowance
        balanceOf[_from] -= _value;
// Subtract from the sender
        balanceOf[_to] += _value;
// Add the same to the recipient
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }

/* This unnamed function is called whenever someone tries to send ether to it */
    function() payable onlyOwner {
// Prevents accidental sending of ether
    }
}
